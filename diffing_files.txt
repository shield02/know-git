## COMMANDS
$ diff rearrange1.py rearrange2.py
$ cat cpu_usage.diff
$ patch cpu_usage.py < cpu_usage.diff
$ diff -u disk_usage_original.py disk_usage_fixed.py > disk_usage.diff
$ patch disk_usage.py < disk_usage.diff

## TOOLS TO COMPARE FILES
~ diff 
~ wdif - highlights the words that have changed in a file
~ graphical tools that compare files side by side and highlight the differences using color
    - meld
    - KDiff3
    - vimdiff

## COMMENTS
~ diff command to generate the difference between two files
~ when we call a diff command we get only the lines that are different bw two files
~ diff -u to show more details.
~ diff -u is used to compare two files line by line and have the differing lines compare side-by-side in the same output
~ the '<' symbol tells us the line was removed while the '>' symbol tells us the line was added
~ 5c5,6 - indicates the line in the first and second file. the 'c' means that a line changes
~ 11a13,15 - the 'a' stand for added
~ psutil module to check the percentage of the CPU that is currently in use
~ the patch command passes a diff file to a script to apply the changes contained in 
a diff file to another file
~ to automatically apply changes to a file, we need to run the patch command on the file that we want 
to modify with the diff file as input
~ use the "<" to redirect the content of a file to standard input
~ use sys.exit to make the return number of the exit code of a script.
which is the code that causes a program to exit with the corresponding exit value


## VERSION CONTROL SYSTEM (VCS)
~ a VCS keeps track all the different versions that we create as we save our changes.
~ VCS always access the history of files, no matter how it is implemented internally.
~ VCS lets us retrieve pas versions of the file or directory and see who changed which files, 
how each file was changes and when the file was changed.
~ VCS allows us to make edit to multiple files and treat that collection of eidts as a single change - called a commit.
~ a VCS even allows to author of a commit to record why the change was made, including what bugs where fixed by the change.
~ Other VCS - Subversion or Mercurial.

## DNS Zone File
~ a DNS zone file is a configuration file that specifies the mapping bw IP addressess and host names in your netwrok.

## GIT
~ GIT is a VCS created in 2005 by Linus Torvalds.
~ Linus initially created GIT to help manage the task of creating linux kernel.
~ Unlike some version control systems that are centralized around a single server, GIT has a distributed architecture.
~ distributed architecture means that every person contributing to a repository has a full copy of the repository on their 
own local development maachines.
~ GIT can work as a standalone program as a server and as a client
~ git-scm.com (scm - source control management. it could be sid to mean the same with VCS)
~ staging area - also known as index is a file maintained by GIT that contains all the information about wht files and changes 
are going to go into your next commit
~ `git init` to initilize a git directory
~ `git status` command gives information about the current working tree and pending changes
~ `git commit` gets our changes in the staging area commited into the GIT directory
~ `git commit` tells GIT we want to save our changes
~ each time you make a commit, GIT records a new snapshot of the state of your project at that moment. it is like a picture of 
exactly how all these files looked at a certain moment in time
~ combined, these snapshots makes up the history of your project
~ when we operate with GIT our files could be either tracked or untracked
~ tracked files are part of the snapshot
~ untracked files aren't a part of snapshot yet
~ you can skip the staging step and go straight into commit. you do this by `-a` flag to the `git commit` command 
~ `git commit -a` doesn't work on new files, because those are untracked files
~ `git commit -a` is a shortcut to stage any changes to tracked files and commit them in one step
~ GIT uses the HEAD alias to represent the currently checked-out snapshot of your project. this lets you know what the content 
of your working directory should be



~ if a file is in a modified state, it means that we've made changes to it that we haven't commited yet
~ GIT notices when we modifies a file, but won't store it until we add it to the staging area

~ when we stage a file, our modified files become stage files. meaning the changes to those files are ready to be committed to 
the project
~ all files that are staged will be part of the next snapshot we take
~ we stage modified files by adding them to the staging area


~ when a file gets commited, the changes made to it are safely stored in a snapshot in the GIT directory

~ so a file tracked by git will first be modified when we change it in any way
~ then it becomes staged when we mark those changes for tracking
~ and finally it will get committed when we store those changes in the VCS

~ ls -l checks the contents of the current working tree
~ `git status` check the current status of our files using 
~ `git config -l` to check our current configuration
~ `git log` will display commit messages and does not do line wrap
~ `git commit -a` to skip `git add` and commit directly
~ `git log -p` to get more information on our commits and tracked files. the `p` comes from `patch` because it will give us the 
patch that was created
~ `git show <commit id>` displays information about a commit and the associated patch
~ `git log --stat` will cause git log to show some stats about the changes in the commit, like which files were changed and how many 
lines were added or removed
~ `git diff` helps us keep track of changes we have made in a file. this command shows only unstaged changes by default
~ `git diff --staged` shows changes that are staged but not commited
~ `git add -p` will show us the changes made to a file before being added to staging area
~ `git log -p -2` to view that last 2 entries in the log


~ any GIT project will consist of three sections - the GIT directiry, the working tree, and the staging area
~ GIT directory contains the history of all the files and changes
~ working tree contains the current state of the project, including any changes that we've made
~ the staging area contains the changes that have been marked to be included in the next commit

# COMMIT MESSAGE
~ a commit message is generally broken up in to a few sections
~ the first line is a short summary of the commit followed by a blank line
~ then followed by a full description of the changes which details why they're necessary and anything that 
might be especially interesting about them or difficult to understand
~ the first line is usually kept at about 50 characters or less
~ if multiple -m flag are given, GIT concatenates the values as separate paragraphs


# Example of A Good Commit Message
Provide a good coomit message example

The purpose of the commit is to provide an example of a hand-crafted, 
artisanal commit message. The first line is a short, approximately 50 character
summary, followed by an empty line. The subsequent paragraphs are jam-packed 
with descriptive information about the change, but each line is kept under 72 
characters in length.

If even more  infromation is needed to explain the change, more paragraphs can 
be added after blank lines, with links to issues, tickets, or bugs. Remember 
that in future you will thank current you for your thoughtfulness and foresight!

## Deleting and Renaming Files
~ `git rm` removes files from your repository
~ `git mv` to rename files in your repository - `git mv <old file name> <new file name>. can also be used to move 
files between directories
~ `gitignore` file - ignor files that we do not want added to our `git status` output. inside this file, we 
specify rules to tell git which files to skip for the current repo

## Undoing Things
# Undoing Changes Before Commiting
~ `git checkout <filename>` changes a file back to its earlier commit state
~ `git checkout -p` to check out individual changes instead of the whole file
~ `git reset` to unstage something from the staging area we didn't actually want to commit

# Amending Commits
~ `git commit --amend` git will take whatever is currently in our staging area and run the `git commit` workflow to 
override the previous commit. i.e. `git commit --amend` allows us to modify and add changes to the most recent commit
~ `git commit --amend` is okay for fixing up local commit, it shouldn't be used on public commit, those that have been 
pushed to a public repository. this is because using the --amend rewrites the git history removing the previous commit 
and replacing it with the amended one

# Rollbacks
~ GIT revert doesn't just mean undo. instaed it creates a commit that contains the inverse of all the changes made in 
the bad commit in order to cancel them out
~ `git revert` creates a new commit with inverse changes which cancels previous changes instead of making it as though 
the original commit never happended

# Identifying a Commit
~ we can target a specific commit by using its commit ID.
~ the commit ID comes up when we run th `git log` command
~ the commit ID is the 40 characters long string after the work commit

## Branching and Merging
~ `git checked` is effectively used to switch branches

# What is a branch?
~ a branch is just a pointer to a particular commit. it represents an independent line of decelopment in a project of 
which the commit it points to is the lates link in a chain of developing history
~ the default branch that git creates for you when a new repository is initialized is called master
~ branches makes it really easy to experiment with new ideas or strategies and projects

# Creating New Branches
~ `git branch` can be used to list, create, delete and manipulate branches
~ `git branch` alone will show you a list of all the branches in our repository
~ `git branch <branch-name>` to create a new branch with the state of the current branch
~ `git checkout <branch-name>` updates the working tree to match the selected branch including both the files and the 
git history. we this command to checkout the latest snapshot for both files and for branches
~ `git checkout -b <branch-name>` to create and switch to a new branch immediately

# Working with Branches
~ when we switch branches git will also change files in our working directory or working tree to whatever snapshot 
head is currently pointing at. also the working directory and commit history will be changed to reflect the snapshot 
of our project in that branch
~ when we checkout a new branch and commit on it, those changes will be added to the history of that branch
~ each branch is just a pointer to a specific commit in a series of snapshots
~ `git branch -d <branch-name>` deletes a branch that we don't need anymore
~ `git branch -D <branch-name> forcefully deletes a branch with changes that have not been merged yet

# Merging
~ merging is the term that GIT usues for combining branched data and history together
~ `git merge <branch-name>` lets us take the independent snapshot and history of one GIT branch and tangle them into 
another. this code is run from the branch we want to merge into

# Merge Conflicts
~ when both branches we are trying to merge have edits to the same part of the same file it results in a merge conflict
~ in merge conflicts, we can use `git status` to get more information on what is going on
~ `git log --graph --oneline` shows a summarized view of the commit history for a repository
~ `git log --graph --oneline --all` shows the different commits and positions in the tree
    `--graph` for seeing the commits as a graph
    `--oneline` to only see one line per commit
    `--all` to represent all branches
~ `git merge --abort` will throw away the merge away and we can start over again. it stops the merge and resets the 
files in your working tree back to the previous commit before the merge ever happened

## Introduction to GitHub

# What is GitHub?
~ GIT is a distributed version control system. by distributed it means that each developer has a copy of the whole 
repository on their own local machine
~ GitHub is a web-based GIT repository hosting service
~ GitHub includes extra features like bug tracking, wikis, and task management
~ GitHub lets us share and access repositories on the web and copy or clone them to our local computer so we can 
work on them

# Basic Interaction with GitHub
~ `git clone <repo url` creates a local copy of a remote repo
~ `git push` gathers all the snapshots we've taken and send them to the remote repository
~ `git config --global credential.helper cache` a credential helper baked in with GIT. will cache our credentials 
for 15 mins
~ `git pull` used to retrieve new changes from the repository

## Using a Remote Repository
~ HTTP is generally used to allow read only access to a repository
~ HTTPS and SSH both provides methods for authenticating users so you can control who gets permission to push
~ when we call a git clone to get a local copy of a remote repository, GIT sets up that remote repository with 
the default origin name
~ `git remote -v` to look at the configuration for that remote in the directory of the repo
~ `git remote show origin` to get more information about a single remote repo
~ git uses remote branches to keep copies of the data that's stored in the remote repository
~ `git branch -r` to list remote branches. get a look at the remote branches that GIT is currently tracking. this branches are read-only
~ GIT doesn't keep the remote and local repo in sync automatically, it wait until we execute commands to move 
data around when we are ready
~ `git fetch` use to sync the data. this command copies the commits done in the remotes repository to the 
remote branches, so we can see what other people have commit
~ `git log origin/master` to see the current commits in the remote repo
~ `git merge origin/master` to integrate the remote origin/master branch and other branches we fetched into our local master branch
~ `git pull` fetch the remote copy of the current branch and automatically try to merge it into the current local branch
~ `git remote update` get the content of remote branches without automatically merging any contents into the local branches

## Solving Conflicts

# The Pull-Merge-Push Workflow
~ `git log -p origin/master` to look at the actual changes in our commit
~ git will try to do all automatic merges and only leave manual conflicts for us to resolve when the automatic merge fails

# Pushing Remote Branches
~ `git push -u origin <branch-name>` the very first time we push a branch to a remote repository

# Rebasing Your Changes
~ rebasing means changing the base commit that's used for our branch
~ rebase allows GIT to do a fast forward merge and keep history linear
N/B: he stayed in refactor branch and rebase main branch
~ `git rebase <branch-name>` 
~ `git push --delete origin <branch-name>` to remove the remote branch
~ `git branch -d <branch-name>` to remove the local branch
~ incases where there are conflicts while trying to rebase, we fix the conflicts we need to
    `git add <file-name>` add the file 
    `git rebase --continue` continue the rebase


# Best Practices for Collaboration
~ Always synchronise your branches before starting any work on your own
~ Avoid having very large changes that modify a lot of different things
~ When working on a big change, it makes sense to have a separate feature branch
~ It make sense to regularly merge changes made on the master branch onto the feature branch
~ If you need to maintain more than one version of a project at the same time, have the lates version of the project in the 
master branch, and the stable version of the project on a separate branch
~ You shouldn't rebase changes that have been push to remote repos
~ Having good commit messages is important

## Pull Request
~ forking is a way of creating s copy of the given repository so that it belongs to our user
~ a pull request is a commit or series of commits that you send to the owner of the repository so that they incorporate it 
into their tree
~ markdown is a lightweight markup language. use to write plain text files that are then formatted following some 
simple rules
~ `git rebase -i <master-branch>` this is an interactive rebase. we used it to squash our 3 commit messages to one

## Code Reviews
~ code review is going through someone else's code, documentation, or configuration and checking that it all make sense and 
follows the expected patterns
~ the goal of code review is to improve the project by making sure that changes are high quality; and that the contents are easy 
to understand; that the style is consistent with the overall project; that we don't forget any important cases
~ code review tools let us comment on someone else's code; this let us leave feedback on how they could make their code better
~ commom code issues are:
    ~ unclear names that makes the code hard to understand
    ~ forgetting to add text
    ~ forgetting to handle a specific condition
    ~ typos in cases of documentation
~ code reviews are not about us being good or bad coders, they're about making our code better

# Managing Collaboration
~ if you are a project maintainer, it is important that you reply promptly to pull requests and do not let them stagnate
~ it is important that you understand any changes you accept

# Tracking Issues
~ issue tracker or bug tracker can help us coordinate our work better
~ an issues tracker tells us the task that need to be done, the state they're in and who's working on them; the system also lets us 
add comments to the issue; they also let people report bugs when they come accross them
~ a popular bug tracker is Bugzilla
~ when writing an issue's description, it is a good idea to include all the information that we have about the problem or missing 
feature and any ideas on how to solve it; if new information comes on later on, it can be added as additional comments on the same issue
~ during merging, to automatically close an issue or pull request in a comment, include a comment or as part of the description of a pull request 
`Closes: #<issue's number>`

# Continuous Integration
~ a continuous integration system (CI) will build and test our code every time there's a change. it will run whenever there is a new commit to 
main branch of our code; it will also run for any changes that come in through pull request
~ once we have our code automatically built and tested, the next automation step is continuous deployment, which is sometimes called 
continuous delivery (CD); it means the new code is deployed often; the goal is to avoid roll outs with a lot of changes between two versions 
of a project and instead do incremental updates with only a few changes at a time; this allow errors to be caught and fixed early
~ one popular CI/CD system is Jenkins
~ GitHub popular alternative is Travis
~ concept of pipelines: pipelines specify the steps that need to run to get the result you want
~ for a simple python project, the pipelines could be to run the automated test
~ for a web service written in GO, the pipeline could be - compile the program, run the unit test and the integration tests and finally 
deploy the code to the test instance
~ another concepts in CI/CD is artifacts
~ artifacts is the name used to describe any files that are genrated as part of the pipeline; these typically include the complied version of the code but 
can include other genrated files like PDFs for the documentation or OS specific packages for easy installation
~ keep the log of the pipeline builds and test stages to review if things fail
~ when setting up CI/CD be careful of how you mange secrets
~ two thing to remember
    ~ make sure the authorizd entities for the test servers are not the same entities authorized to deploy on the production servers
    ~ always have a plan to recover your access in case your pipeline gets compromised



